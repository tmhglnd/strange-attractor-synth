//==============================================================================
// strange-attractors.genexpr
// Algorithms for strange attractors in the signal domain with gen~
//
// Based on beautiful images from ChaoticAtmospheres on Deviant Art
// https://www.deviantart.com/chaoticatmospheres/gallery/44050549/strange-attractors
//
// by Timo Hoogland (c) 2019
// www.timohoogland.com
// GNU GPL3 License
//==============================================================================

// generate a random value between a lo and hi range
rrand(lo, hi){
	return abs(noise()) * (hi-lo) + lo;
}

// what attractor is selected?
Param attractor(1);

// offset the position of the attractor in space
// apply gain to scale the attractor
History x_offset();
History y_offset();
History z_offset();
History gain();

// all attractor parameters, differ per attractor
History a(); 
History b();
History c();
History d();
History f();
History g();

// the delta-time increment, determines speed of attractor
History dt();

// the x,y,z coordinates
History x();
History y();
History z();

// following codeblock will only run if the condition is true
// using a click to set the speed of the calculations
if (in1 != 0){
	isChanged = abs(delta(attractor)) > 0;
	
	if (isChanged){
		x_offset = 0;
		y_offset = 0;
		z_offset = 0;
		// random initial position
		x = rrand(-0.3, 0.3);
		y = rrand(-0.3, 0.3);
		z = rrand(-0.3, 0.3);
	}
	
	// Lorenz Attractor
	if (attractor == 1){
		if (isChanged){
			dt = 0.005;
			z_offset = -0.75;
			gain = 0.03;
			
			a = 10;
			b = 28;
			c = 8/3;
		}
		x = x + dt * (a * (y - x));
		y = y + dt * (x * (b - z) - y);
		z = z + dt * (x * y - c * z);
	}
	
	// Lorenz Mod 2 Attractor
	if (attractor == 7){
		if (isChanged){
			dt = 0.005;
			gain = 0.06;
			
			a = 0.9;
			b = 5;
			c = 9.9;
			d = 1;
		}
		x = x + dt * (-a * x + (y*y) - (z*z) + a * c);
		y = y + dt * (x * (y - b * z) + d);
		z = z + dt * (-z + x * (b * y + z));
	}
	
	// Arneodo Attractor
	else if (attractor == 2){
		if (isChanged){
			dt = 0.015;
			gain = 0.1;
			
			a = -5.5;
			b = 3.5;
			c = -1;
		}
		x = x + dt * y;
		y = y + dt * z;
		z = z + dt * (-a * x - b * y - z + c * pow(x, 3));
	}
	
	
	// Burke - Shaw Attractor
	else if (attractor == 3){
		if (isChanged){
			dt = 0.003;
			gain = 0.4;
			
			a = 10;
			b = 4.272;
		}
		x = x + dt * (-a * (x + y));
		y = y + dt * (-y - a * x * z);
		z = z + dt * (a * x * y + b);
	}
	
	// Chen - Lee Attractor
	else if (attractor == 4){
		if (isChanged){
			dt = 0.005;
			gain = 0.025;
			z_offset = -0.25;
			
			a = 5;
			b = -10;
			c = -0.38;
		}
		x = x + dt * (a * x - y * z);
		y = y + dt * (b * y + x * z);
		z = z + dt * (c * z + x * (y / 3));
	}
	
	// Aizawa Attractor
	else if (attractor == 5){
		if (isChanged){
			dt = 0.01;
			gain = 0.5;
			z_offset = -0.25;
			
			a = 0.95;
			b = 0.7;
			c = 0.1;
			d = 3.5;
			f = 0.25;
			g = 0.6;
		}
		x = x + dt * ((z - b) * x - d * y);
		y = y + dt * (d * x + (z - b) * y);
		z = z + dt * (g + a * z - (z*z*z)/3 - (x*x + y*y) * (1 + f*z) + c * z * (x*x*x));
	}
	
	// Thomas Attractor
	else if (attractor == 6){
		if (isChanged){
			dt = 0.05;
			gain = 0.2;
			
			a = 0.19;
		}
		x = x + dt * (-a * x + sin(y));
		y = y + dt * (-a * y + sin(z));
		z = z + dt * (-a * z + sin(x));
	}
	
	// Hadley Attractor
	else if (attractor == 8){
		if (isChanged){
			dt = 0.005;
			gain = 0.4;
			x_offset = -0.5;
			
			a = 0.2;
			b = 4;
			c = 8;
			d = 1;
		}
		x = x + dt * (-(y*y) - (z*z) - a * x + a * c);
		y = y + dt * (x * y - b * x * z - y + d);
		z = z + dt * (b * x * y + x * z - z);
	}
	
	// Halvorsen Attractor
	else if (attractor == 9){
		if (isChanged){
			dt = 0.005;
			gain = 0.08;
			
			x_offset = 0.2;
			y_offset = 0.25;
			z_offset = 0.25;
			
			a = 1.4;
		}
		x = x + dt * (-a*x - 4*y - 4*z - y*y);
		y = y + dt * (-a*y - 4*z - 4*x - z*z);
		z = z + dt * (-a*z - 4*x - 4*y - x*x);
	}
	
	// Three-Scroll Unified Chaotic System Attractor
	else if (attractor == 10){
		if (isChanged){
			dt = 0.002;
			gain = 0.011;
			
			z_offset = -0.4;
			
			a = 40;
			b = 0.833;
			c = 20;
			d = 0.5;
			f = 0.65;
		}
		x = x + dt * (a * (y - x) + d*x*z);
		y = y + dt * (c*y - x*z);
		z = z + dt * (b*z + x*y - f * (x*x));
	}
	
	// Coullet Attractor
	else if (attractor == 11){
		if (isChanged){
			dt = 0.04;
			gain = 0.5;
			
			x_offset = 0.1;
			
			a = 0.8;
			b = -1.1;
			c = -0.45;
			d = -1;
		}
		x = x + dt * (y);
		y = y + dt * (z);
		z = z + dt * (a*x + b*y + c*z + d*(x*x*x));
	}
	
	/*
	Not working - Needs fixing and checking of algorithm
	
	// Chen - Celikovsky Attractor
	else if (attractor == 4){
		if (isChanged){
			gain = 0.05;
			z_offset = 0;
			
			a = 36;
			b = 3;
			c = 20;
		}
		x = x + dt * (a * (y - x));
		y = y + dt * (-x * z + c * y);
		z = z + dt * (x * y - b * z);
	}*/
	
	/*
	Not working - Needs fixing and checking of algorithm
	
	// Lorenz Mod 1 Attractor
	if (attractor == 8){
		if (isChanged){
			dt = 0.005;
			z_offset = 0;
			gain = 0.03;
			
			a = 0.1;
			b = 4;
			c = 14;
			d = 0.08;
		}
		x = x + dt * (-a * x + (y*y) - (z*z) + a * c);
		y = y + dt * (x * (y - b * z) + d);
		z = z + dt * (z + x * (b * y + z));
	}*/
}

// output x, y, z parameters with gain and offset
out1 = x * gain + x_offset;
out2 = y * gain + y_offset;
out3 = z * gain + z_offset;